! 
! Copyright (C) 2005 WanT Group
! 
! This file is distributed under the terms of the 
! GNU General Public License. See the file `License' 
! in the root directory of the present distribution, 
! or http://www.gnu.org/copyleft/gpl.txt . 
! 
!********************************************
   MODULE T_input_parameters_module
!********************************************
   USE kinds,         ONLY : dbl
   USE constants,     ONLY : ZERO, EPS_m2, EPS_m5 
   USE parameters,    ONLY : nstrx
   USE parser_module, ONLY : change_case
   IMPLICIT NONE
   PRIVATE
   SAVE
!
! This module contains the definitions of the parameters in the
! input file and of thier default values (when any). 
! These data are then exported to the input module where the
! main routine controls the IO and after that exports to the
! final modules where internal data are stored.
!
! The T character in front of the module name stands there
! in order to distinguish from wannier modules.
!
! Here are also the routine reading and checking the NAMELIST
!
! routines in this module:
! SUBROUTINE  read_namelist_input_conductor(unit)
!

!
! ... declarations

!
!======================================== 
! INPUT_CONDUCTOR Namelist parameters
!======================================== 

! General information



! Input files



   CHARACTER(nstrx) :: in_datafile_L = ' '
!  datafile for hamiltonian left lead
   CHARACTER(nstrx) :: in_datafile_R = ' '
!  datafile for hamiltonian right lead

!
   INTEGER :: in_max_iter_L=0
! max number of iteration
!
   INTEGER :: in_max_iter_R=0
! max number of iteration

   INTEGER :: dim_subspace = 0
       ! WF number in the grenn region

! Leads SE part


   INTEGER :: dimL = 0
       ! WF number in lead L

   INTEGER :: dimR = 0
       ! WF number in lead R

   INTEGER :: dimC = 0
       ! WF number in the central conductor region

  INTEGER :: max_iter_L = 0
       ! recursion iter  

  INTEGER :: max_iter_R = 0
       !  recursion iter

   REAL(dbl) :: conv_criterion = 0.000001
       ! lower bound for recursion
   REAL(dbl) :: numerical_cut_off = 0.00000001
!
! Mayou formula case
  INTEGER :: max_iter_LC = 0
       ! recursion iter  

  INTEGER :: max_iter_CR = 0
       !  recursion iter
  INTEGER :: dim_CC = 0
       !  recursion iter


! Transmittance part


   INTEGER :: ne = 1000  
       ! the dimension of the energy grid

   REAL(dbl) :: emin = -10.0
       ! lower bound of the energy range

   REAL(dbl) :: emax =  10.0
       ! upper bound of the energy range

   REAL(dbl) :: delta =  EPS_m5
       ! i\delta broadening of green functions
   REAL(dbl) :: delta_lead =  EPS_m5
       ! i\delta broadening of green functions




   INTEGER :: transport_dir = 0
       ! transport direction 

   CHARACTER(nstrx) :: calculation_type = 'conductor'
       ! ( 'conductor' | 'bulk' )
       ! wheter full conductor or bulk calculation is performed

   CHARACTER(nstrx) :: calculation_type_allowed(2)
   DATA calculation_type_allowed / 'conductor',  'bulk' /
       ! the allowed values for calculation_type

   CHARACTER(nstrx) :: conduct_formula = 'landauer'
       ! ( 'landauer' | 'generalized' )
       ! wheter use landauer of correlation corrected formula

   CHARACTER(nstrx) :: conduct_formula_allowed(3)
   DATA conduct_formula_allowed / 'landauer',  'generalized' , 'mayou' /
       ! the allowed values for conduct_formula

   INTEGER :: nprint = 20 
       ! every nprint energy step write to stdout

   LOGICAL :: debug_mode = .FALSE.
       !

   LOGICAL :: cut_chain = .FALSE.
       !



   NAMELIST / INPUT_CONDUCTOR / dimC, calculation_type, &
                 conduct_formula, ne, emin, emax, nprint, delta, delta_lead, &
                 in_datafile_L, in_datafile_R, in_max_iter_L, in_max_iter_R, &
                 transport_dir, dim_subspace,  &
                 max_iter_L, max_iter_R, debug_mode, conv_criterion, numerical_cut_off, &
                 max_iter_LC, max_iter_CR, dim_CC, cut_chain

    !


   PUBLIC :: dimC, calculation_type, conduct_formula
   PUBLIC :: dim_subspace, max_iter_L, max_iter_R, numerical_cut_off
   PUBLIC :: ne, emin, emax, nprint, delta, delta_lead
   PUBLIC :: in_datafile_L, in_datafile_R, in_max_iter_L, in_max_iter_R
   PUBLIC :: transport_dir, debug_mode, conv_criterion
   PUBLIC :: INPUT_CONDUCTOR
   PUBLIC :: dimR, dimL
   PUBLIC :: dim_CC, max_iter_LC, max_iter_CR


!
! ... subroutines
!

   PUBLIC :: read_namelist_input_conductor

CONTAINS

!**********************************************************
   SUBROUTINE read_namelist_input_conductor(unit)
   !**********************************************************
   !
   ! reads INPUT_CONDUCTOR namelist
   !
   IMPLICIT NONE
      INTEGER, INTENT(in)   :: unit

      CHARACTER(29) :: subname='read_namelist_input_conductor'
      LOGICAL :: allowed
      INTEGER :: i, ios, itest

      READ(unit, INPUT_CONDUCTOR, IOSTAT=ios )
         IF (ios/=0) CALL errore(subname,'reading INPUT_CONDUCTOR namelist',ABS(ios))

      !
      ! ... checking parameters
      !
      IF ( transport_dir < 1 .OR. transport_dir > 3) &
           CALL errore(subname,'Invalid transport_dir',1)

      IF ( dimC <= 0) CALL errore(subname,'Invalid dimC',1)

     ! IF ( LEN_TRIM(datafile_C) == 0 ) &
     !      CALL errore(subname,'datafile_C unspecified',1)

      IF ( emax <= emin ) CALL errore(subname,'Invalid EMIN EMAX',1)
      IF ( ne <= 1 ) CALL errore(subname,'Invalid NE',1)
   !   IF ( niterx <= 0 ) CALL errore(subname,'Invalid NITERX',1)
      IF ( nprint <= 0) CALL errore(subname, ' nprint must be > 0 ', -nprint+1 )
      IF ( delta < ZERO ) CALL errore(subname,'Invalid DELTA',1)
      IF ( delta > EPS_m2 ) CALL errore(subname,'DELTA too large',1)

      CALL change_case(calculation_type,'lower')
      allowed=.FALSE.
      DO i=1,SIZE(calculation_type_allowed)
          IF ( TRIM(calculation_type) == calculation_type_allowed(i) ) allowed=.TRUE. 
      ENDDO
      IF (.NOT. allowed) &
          CALL errore(subname,'Invalid calculation_type ='//TRIM(calculation_type),10)

      CALL change_case(conduct_formula,'lower')
      allowed=.FALSE.
      DO i=1,SIZE(conduct_formula_allowed)
          IF ( TRIM(conduct_formula) == conduct_formula_allowed(i) ) allowed=.TRUE. 
      ENDDO
      IF (.NOT. allowed) &
          CALL errore(subname,'Invalid conduct_formula ='//TRIM(conduct_formula),10)


      IF ( TRIM(calculation_type) == 'conductor' ) THEN
           !IF ( dimL <= 0) CALL errore(subname,'Invalid dimL',1)
           !IF ( dimR <= 0) CALL errore(subname,'Invalid dimR',1)
           IF ( dim_subspace <= 0) CALL errore(subname,'Invalid dim_subspace',1)
           !
           IF ( LEN_TRIM(in_datafile_L) == 0 ) &
                CALL errore(subname,'datafile_L unspecified',1)
           IF ( LEN_TRIM(in_datafile_R) == 0 ) &
                CALL errore(subname,'datafile_R unspecified',1)
      ENDIF

      dimR = max_iter_R * dim_subspace
      dimL = max_iter_L * dim_subspace
      itest = (in_max_iter_L + in_max_iter_R - 1) * dim_subspace - dimR - dimL
      IF ( itest /= dimC ) CALL errore(subname,'input dimC and calculated dimC are different',itest)

      IF (( TRIM(conduct_formula) == 'mayou' ) .AND. (max_iter_LC == 0)) &
             CALL errore(subname,'max_iter_LC unspecified',11)

      IF (( TRIM(conduct_formula) == 'mayou' ) .AND. (max_iter_CR == 0)) &
             CALL errore(subname,'max_iter_CR unspecified',12)

      IF (( TRIM(conduct_formula) == 'mayou' ) .AND. (dim_CC == 0)) &
             CALL errore(subname,'dim_CC unspecified',13)


           !
   END SUBROUTINE read_namelist_input_conductor


END MODULE T_input_parameters_module

