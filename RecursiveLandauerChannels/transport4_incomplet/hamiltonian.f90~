!
! Copyright (C) 2005 WanT Group
!
! This file is distributed under the terms of the
! GNU General Public License. See the file `License\'
! in the root directory of the present distribution,
! or http://www.gnu.org/copyleft/gpl.txt .
!
!*********************************************
   MODULE T_hamiltonian_module
!*********************************************
   USE kinds,                ONLY : dbl
   USE parameters,           ONLY : nstrx
   USE T_control_module,     ONLY : dim_subspace, max_iter_L, max_iter_R
   USE constants,            ONLY : CZERO, CONE
   USE matrix_module,        ONLY : A_matrix_C, B_matrix_C, A_matrix_LC, B_matrix_LC, A_matrix_CR, B_matrix_CR
   USE in_matrix_module,     ONLY : total_iter


   IMPLICIT NONE
   PRIVATE 
   SAVE
!
! Contains transport hamiltonian data
! 
    ! 
    ! WF numbers in lead L,R and conductor C 
    INTEGER                   :: dimL  
    INTEGER                   :: dimC       
    INTEGER                   :: dimR       
!    INTEGER                   :: dimx      ! MAX ( dimL, dimC, dimR )       
    !
!    COMPLEX(dbl), ALLOCATABLE :: h00_L(:,:)
!    COMPLEX(dbl), ALLOCATABLE :: h00_R(:,:)
    COMPLEX(dbl), ALLOCATABLE :: h00_C(:,:)
    COMPLEX(dbl), ALLOCATABLE :: h_LC(:,:)
    COMPLEX(dbl), ALLOCATABLE :: h_CR(:,:)
    !
    COMPLEX(dbl), ALLOCATABLE :: s00_C(:,:)
    !
    LOGICAL :: alloc = .FALSE.


!
! end delcarations
!
   PUBLIC :: dimR
   PUBLIC :: dimL

   PUBLIC :: dimC
   !
 !  PUBLIC :: h00_L
!   PUBLIC :: h00_R
   PUBLIC :: h00_C
   PUBLIC :: h_LC
   PUBLIC :: h_CR
   !
   PUBLIC :: s00_C
   !
   PUBLIC :: alloc
   !
   PUBLIC :: hamiltonian_allocate
   PUBLIC :: hamiltonian_deallocate
   PUBLIC :: hamiltonian_init


CONTAINS

!
! subroutines
!

!**********************************************************
   SUBROUTINE hamiltonian_allocate()
   !**********************************************************
   IMPLICIT NONE
      CHARACTER(20)      :: subname="hamiltonian_allocate"
      INTEGER  :: ierr

      IF ( alloc )       CALL errore(subname,'already allocated', 1 )
      !IF ( dimL <= 0 )   CALL errore(subname,'invalid dimL', 1 )
      !IF ( dimR <= 0 )   CALL errore(subname,'invalid dimR', 1 )
      IF ( dimC <= 0 )   CALL errore(subname,'invalid dimC', 1 )

      !
      ! h allocation       
      !
 !     ALLOCATE ( h00_L(dimL,dimL), STAT=ierr )
 !          IF( ierr /=0 ) CALL errore(subname, ' allocating h00_L', 1 )
!      ALLOCATE ( h00_R(dimR,dimR), STAT=ierr )
!           IF( ierr /=0 ) CALL errore(subname, ' allocating h00_R', 1 )
      ALLOCATE ( h00_C(dimC,dimC), STAT=ierr )
           IF( ierr /=0 ) CALL errore(subname, ' allocating h00_C', 1 )
      ALLOCATE ( h_LC(dim_subspace,dimC), STAT=ierr )
           IF( ierr /=0 ) CALL errore(subname, ' allocating h_LC', 1 )
      ALLOCATE ( h_CR(dimC,dim_subspace), STAT=ierr )
           IF( ierr /=0 ) CALL errore(subname, ' allocating h_CR', 1 )

      !
      ! s allocation
      !
      ALLOCATE ( s00_C(dimC,dimC), STAT=ierr )
           IF( ierr /=0 ) CALL errore(subname, ' allocating s00_C ', 1 )

      alloc = .TRUE.
   END SUBROUTINE hamiltonian_allocate


!**********************************************************
   SUBROUTINE hamiltonian_deallocate()
   !**********************************************************
   IMPLICIT NONE
      CHARACTER(22)      :: subname="hamiltonian_deallocate"
      INTEGER :: ierr

      IF ( .NOT. alloc ) RETURN

!          DEALLOCATE ( h00_L, STAT=ierr )
!             IF( ierr /=0 ) CALL errore(subname, 'deallocating h00_L', 1 )
!          DEALLOCATE ( h00_R, STAT=ierr )
!             IF( ierr /=0 ) CALL errore(subname, 'deallocating h00_R', 1 )
      DEALLOCATE ( h00_C, STAT=ierr )
           IF( ierr /=0 ) CALL errore(subname, 'deallocating h00_C', 1 )
      DEALLOCATE ( h_LC, STAT=ierr )
           IF( ierr /=0 ) CALL errore(subname, 'deallocating h_LC', 1 )
      DEALLOCATE ( h_CR, STAT=ierr )
           IF( ierr /=0 ) CALL errore(subname, 'deallocating h_CR', 1 )

      DEALLOCATE ( s00_C, STAT=ierr )
           IF( ierr /=0 ) CALL errore(subname, 'deallocating s00_C', 1 )
          
      alloc = .FALSE.   

   END SUBROUTINE hamiltonian_deallocate


!*******************************************************************
   SUBROUTINE hamiltonian_init()
   !*******************************************************************
   !

   IMPLICIT NONE

      ! local variables
      !
      CHARACTER(16) :: subname="hamiltonian_init"
      INTEGER       :: i, ierr, irows, icols, max_iter_C
      INTEGER       :: irows_shift, icols_shift, iter
      !
      ! end of declarations
      !

   !
   !----------------------------------------
   ! main Body
   !----------------------------------------
   !

      ! allocations
      !
      IF ( .NOT. alloc )    CALL errore(subname,'hamiltonian not allocated', 1 )

      s00_C(:,:)  = CZERO
      !
      DO i = 1, dimC
         s00_C(i,i) = CONE
      ENDDO
      !
      !
      !
      ! read basic quantities
      !
      !CALL read_matrix( datafile_C, 'H00_C', dimC, dimC, h00_C, dimC, dimC)
      !
      h00_C (:,:)  = CZERO
      !
      max_iter_C = total_iter -  max_iter_R -  max_iter_L
      !
            ! generating the off diagonal terms (B_matrix)
            ! last element for the B matrices
      DO iter=1,max_iter_C-1
         DO icols=1, dim_subspace
               icols_shift=dim_subspace*iter + icols
               DO irows=1, dim_subspace
                     irows_shift=dim_subspace*(iter-1)+irows
                     h00_C(irows_shift,icols_shift)=CONJG(B_matrix_C(iter,icols,irows))
                     h00_C(icols_shift,irows_shift)=CONJG(h00_C(irows_shift,icols_shift))
                     !
               ENDDO
         ENDDO
      ENDDO
            !
            !
            ! generating the diagonal terms (A_matrix)
         DO iter=1,max_iter_C
            DO icols=1, dim_subspace
               icols_shift=dim_subspace*(iter-1)+icols
               DO irows=1, dim_subspace
                  irows_shift=dim_subspace*(iter-1)+irows
                  !
                  h00_C(irows_shift,icols_shift)=A_matrix_C(iter,irows,icols)
                  !
               ENDDO
            ENDDO
         ENDDO
            !
      !
      h_CR (:,:)  = CZERO
      h_LC (:,:)  = CZERO
      !
      iter = max_iter_C
      DO irows=1, dim_subspace
         !
         irows_shift=dim_subspace*(iter-1)+irows
         !
         DO icols=1, dim_subspace
            !
            !icols_shift=dim_subspace*(iter-1)+icols
            !
            h_CR(irows_shift,icols) =  CONJG (B_matrix_CR(1,icols,irows))
            !
            h_LC(irows,icols) =  CONJG (B_matrix_LC(1,icols,irows))
            !
         ENDDO
         !
      ENDDO
      !
      !
      ! local cleaning
   END SUBROUTINE hamiltonian_init

END MODULE T_hamiltonian_module

