!
! Copyright (C) 2009 Molecular Foundry Berkeley
!
! This file is distributed under the terms of the
! GNU General Public License. See the file `License'
! in the root directory of the present distribution,
! or http://www.gnu.org/copyleft/gpl.txt .
!
! Contributors  : Pierre DARANCET
!***********************************************
   MODULE T_input_module
   !***********************************************
  USE kinds, ONLY : dbl
  USE constants, ONLY : ZERO, ONE, CZERO, CONE, CI,PI, EPS_m3, EPS_m5
   IMPLICIT NONE
   PRIVATE 
   SAVE
!


   ! Public
   ! Private
   ! Default Values
   !INTEGER :: nprint=1
   !INTEGER :: nprint_PDOS=1
   !INTEGER :: nprint_transmission=1   
   LOGICAL :: calculate_RR=.TRUE.
   LOGICAL :: print_RR=.TRUE.
   !LOGICAL :: print_Photocurrent=.TRUE.
   LOGICAL :: print_current=.TRUE.
   !LOGICAL :: print_Photocurrentmax=.TRUE.
   INTEGER :: debug_level=0
   !INTEGER :: nphotonfrequency=1
   !REAL(dbl) :: photonmax=2.0*ONE
   !REAL(dbl) :: photonmin=ZERO
   !REAL(dbl) :: photoncouplingconstant=EPS_m5
   !REAL(dbl) :: FGR_broadening=EPS_m3
   REAL(dbl) :: emin=ZERO
   REAL(dbl) :: emax=ZERO
   INTEGER :: ne=0
   !REAL(dbl) :: biasmin=ZERO
   REAL(dbl) :: bias=ZERO
   INTEGER :: ngap=1
   REAL(dbl) :: gapmin=ZERO
   REAL(dbl) :: gapmax=ZERO
 
   REAL(dbl) :: gammamin=ZERO
   REAL(dbl) :: gammamax=ZERO

   REAL(dbl) :: electronic_temperature
   INTEGER :: ngamma=1
   INTEGER :: dimC=2
   INTEGER :: dimL=1
   INTEGER :: dimR=1
   CHARACTER(100) :: HC_file="HC.dat"
   CHARACTER(100) :: HL_file="HL.dat"  
   CHARACTER(100) :: HR_file="HR.dat"  
   ! Other Module Variables
   CHARACTER(14) :: modulename="T_input_module"
   ! Public variables

   ! Public routines:
   PUBLIC                 :: input_manager
   ! private routines
    ! input_summarize

  CONTAINS 
!***********************************************
   SUBROUTINE read_input
   !***********************************************
   ! read the inp file located in the local directory
  IMPLICIT NONE
      ! Local
       CHARACTER(10)      :: subname="read_input"
       INTEGER :: ierr
        CHARACTER(100)  :: chr
       CHARACTER(3)      :: fname_in="inp"


   PRINT*, "... READING Input File"
   OPEN(100, FILE=TRIM(fname_in),FORM='formatted')

   PRINT*, "     ... READING calculate_RR"
         READ(100,"(a12,L10)") chr, calculate_RR
           IF ( TRIM(chr) /= "calculate_RR" ) THEN
            PRINT*, "Error in Routine ",  TRIM(subname),  " of ", TRIM(modulename)
            PRINT*, "Waiting for calculate_RR", " Input = ", TRIM(chr)
            STOP
         ENDIF 
   PRINT*, "          calculate_RR=", calculate_RR
   !
   PRINT*, "     ... READING print_RR"
         READ(100,"(a8,L10)") chr, print_RR
           IF ( TRIM(chr) /= "print_RR" ) THEN
            PRINT*, "Error in Routine ",  TRIM(subname),  " of ", TRIM(modulename)
            PRINT*, "Waiting for print_RR", " Input = ", TRIM(chr)
            STOP
         ENDIF 
   PRINT*, "          print_RR=", print_RR
   !
   !
   PRINT*, "     ... READING print_current"
         READ(100,"(a13,L10)") chr, print_current
           IF ( TRIM(chr) /= "print_current" ) THEN
            PRINT*, "Error in Routine ",  TRIM(subname),  " of ", TRIM(modulename)
            PRINT*, "Waiting for print_current", " Input = ", TRIM(chr)
            STOP
         ENDIF 
   PRINT*, "          print_current=", print_current
   !
   !
   PRINT*, "     ... READING debug_level"
         READ(100,"(a11,I10)") chr, debug_level
           IF ( TRIM(chr) /= "debug_level" ) THEN
            PRINT*, "Error in Routine ",  TRIM(subname),  " of ", TRIM(modulename)
            PRINT*, "Waiting for debug_level", " Input = ", TRIM(chr)
            STOP
         ENDIF 
   PRINT*, "          debug_level=", debug_level
   !
   !
   PRINT*, "     ... READING emin"
         READ(100,"(a4,F5.10)") chr, emin
           IF ( TRIM(chr) /= "emin" ) THEN
            PRINT*, "Error in Routine ",  TRIM(subname),  " of ", TRIM(modulename)
            PRINT*, "Waiting for emin", " Input = ", TRIM(chr)
            STOP
         ENDIF 
   PRINT*, "         emin=", emin
   !
   PRINT*, "     ... READING emax"
         READ(100,"(a4,F5.10)") chr, emax
           IF ( TRIM(chr) /= "emax" ) THEN
            PRINT*, "Error in Routine ",  TRIM(subname),  " of ", TRIM(modulename)
            PRINT*, "Waiting for emax", " Input = ", TRIM(chr)
            STOP
         ENDIF 
   PRINT*, "         emax=", emax
   !
   PRINT*, "     ... READING ne"
         READ(100,"(a2,I10)") chr, ne
           IF ( TRIM(chr) /= "ne" ) THEN
            PRINT*, "Error in Routine ",  TRIM(subname),  " of ", TRIM(modulename)
            PRINT*, "Waiting for nemax", " Input = ", TRIM(chr)
            STOP
         ENDIF 
   PRINT*, "          nemax=", ne
   !
 !
   PRINT*, "     ... READING bias"
         READ(100,"(a4,F5.10)") chr, bias
           IF ( TRIM(chr) /= "bias" ) THEN
            PRINT*, "Error in Routine ",  TRIM(subname),  " of ", TRIM(modulename)
            PRINT*, "Waiting for bias", " Input = ", TRIM(chr)
            STOP
         ENDIF 
   PRINT*, "         bias=", bias
   !
  PRINT*, "     ... READING electronic_temperature"
         READ(100,"(a23,F5.10)") chr, electronic_temperature
           IF ( TRIM(chr) /= "electronic_temperature" ) THEN
            PRINT*, "Error in Routine ",  TRIM(subname),  " of ", TRIM(modulename)
            PRINT*, "Waiting for electronic_temperature", " Input = ", TRIM(chr)
            STOP
         ENDIF 
   PRINT*, "         electronic_temperature=", electronic_temperature
   !

   PRINT*, "     ... READING gapmin"
         READ(100,"(a6,F5.10)") chr, gapmin
           IF ( TRIM(chr) /= "gapmin" ) THEN
            PRINT*, "Error in Routine ",  TRIM(subname),  " of ", TRIM(modulename)
            PRINT*, "Waiting for gapmin", " Input = ", TRIM(chr)
            STOP
         ENDIF 
   PRINT*, "         gapmin=", gapmin
   !
   PRINT*, "     ... READING gapmax"
         READ(100,"(a6,F5.10)") chr, gapmax
           IF ( TRIM(chr) /= "gapmax" ) THEN
            PRINT*, "Error in Routine ",  TRIM(subname),  " of ", TRIM(modulename)
            PRINT*, "Waiting for gapmax", " Input = ", TRIM(chr)
            STOP
         ENDIF 
   PRINT*, "         gapmax=", gapmax
   !
   PRINT*, "     ... READING ngap"
         READ(100,"(a4,I10)") chr, ngap
           IF ( TRIM(chr) /= "ngap" ) THEN
            PRINT*, "Error in Routine ",  TRIM(subname),  " of ", TRIM(modulename)
            PRINT*, "Waiting for ngap", " Input = ", TRIM(chr)
            STOP
         ENDIF 
   PRINT*, "          ngap=", ngap
   !
   PRINT*, "     ... READING gammamin"
         READ(100,"(a8,F5.10)") chr, gammamin
           IF ( TRIM(chr) /= "gammamin" ) THEN
            PRINT*, "Error in Routine ",  TRIM(subname),  " of ", TRIM(modulename)
            PRINT*, "Waiting for gammamin", " Input = ", TRIM(chr)
            STOP
         ENDIF 
   PRINT*, "         gammamin=", gammamin
   !
   PRINT*, "     ... READING gammamax"
         READ(100,"(a8,F5.10)") chr, gammamax
           IF ( TRIM(chr) /= "gammamax" ) THEN
            PRINT*, "Error in Routine ",  TRIM(subname),  " of ", TRIM(modulename)
            PRINT*, "Waiting for gammamax", " Input = ", TRIM(chr)
            STOP
         ENDIF 
   PRINT*, "         gammamax=", gammamax
   !
   PRINT*, "     ... READING ngamma"
         READ(100,"(a6,I10)") chr, ngamma
           IF ( TRIM(chr) /= "ngamma" ) THEN
            PRINT*, "Error in Routine ",  TRIM(subname),  " of ", TRIM(modulename)
            PRINT*, "Waiting for ngamma", " Input = ", TRIM(chr)
            STOP
         ENDIF 
   PRINT*, "          ngamma=", ngamma
   !
   PRINT*, "     ... READING dimC"
         READ(100,"(a4,I10)") chr, dimC
           IF ( TRIM(chr) /= "dimC" ) THEN
            PRINT*, "Error in Routine ",  TRIM(subname),  " of ", TRIM(modulename)
            PRINT*, "Waiting for dimC", " Input = ", TRIM(chr)
            STOP
         ENDIF 
   PRINT*, "          dimC=", dimC
   !
   PRINT*, "     ... READING dimL"
         READ(100,"(a4,I10)") chr, dimL
           IF ( TRIM(chr) /= "dimL" ) THEN
            PRINT*, "Error in Routine ",  TRIM(subname),  " of ", TRIM(modulename)
            PRINT*, "Waiting for dimL", " Input = ", TRIM(chr)
            STOP
         ENDIF 
   PRINT*, "          dimL=", dimL
   !
   PRINT*, "     ... READING dimR"
         READ(100,"(a4,I10)") chr, dimR
           IF ( TRIM(chr) /= "dimR" ) THEN
            PRINT*, "Error in Routine ",  TRIM(subname),  " of ", TRIM(modulename)
            PRINT*, "Waiting for dimR", " Input = ", TRIM(chr)
            STOP
         ENDIF 
   PRINT*, "          dimR=", dimR
   !
   PRINT*, "     ... READING HC_file"
         READ(100,"(a7,a50)") chr, HC_file
           IF ( TRIM(chr) /= "HC_file" ) THEN
            PRINT*, "Error in Routine ",  TRIM(subname),  " of ", TRIM(modulename)
            PRINT*, "Waiting for HC_file", " Input = ", TRIM(chr)
            STOP
         ENDIF 
   PRINT*, "          HC_file=", TRIM(HC_file)
   !
   PRINT*, "     ... READING HL_file"
         READ(100,"(a7,a50)") chr, HL_file
           IF ( TRIM(chr) /= "HL_file" ) THEN
            PRINT*, "Error in Routine ",  TRIM(subname),  " of ", TRIM(modulename)
            PRINT*, "Waiting for HL_file", " Input = ", TRIM(chr)
            STOP
         ENDIF 
   PRINT*, "          HL_file=", TRIM(HL_file)
   !
   PRINT*, "     ... READING HR_file"
         READ(100,"(a7,a50)") chr, HR_file
           IF ( TRIM(chr) /= "HR_file" ) THEN
            PRINT*, "Error in Routine ",  TRIM(subname),  " of ", TRIM(modulename)
            PRINT*, "Waiting for HR_file", " Input = ", TRIM(chr)
            STOP
         ENDIF 
   PRINT*, "          HR_file=", TRIM(HR_file)
   CLOSE(100)
   PRINT*, "... END of READING Input File"

    END SUBROUTINE read_input
!***********************************************
   SUBROUTINE input_manager
   !***********************************************
   ! 
  IMPLICIT NONE
      ! Local
       CHARACTER(13)      :: subname="input_manager"
       INTEGER :: ierr
 
        CALL read_input()


        CALL set_control()


        CALL set_egrid()
        CALL set_gap()
        CALL set_gamma()
        CALL set_hamiltonian_workspace()
        CALL set_hamiltonian_reference()

        CALL input_summarize()

    END SUBROUTINE input_manager
!***********************************************
   SUBROUTINE  set_control  
   !***********************************************
   ! 
  USE T_control_module,       ONLY :  calculate_RR_ => calculate_RR, &
                                     debug_level_ => debug_level, &
                                     print_RR_ => print_RR, &
                                     print_current_ => print_current, &
                                     electronic_temperature_ => electronic_temperature, &
                                     bias_ => bias


  IMPLICIT NONE
      ! Local
       CHARACTER(11)      :: subname="set_control"
       INTEGER :: ierr
         
      
   
        IF ( ( debug_level < 0 ) .OR. ( debug_level > 5 )) THEN 
            PRINT*, "Error in Routine ",  TRIM(subname) , " in module ", TRIM(modulename)
            PRINT*, "Error in debug level definition", " debug level is intended to be 6 >  dl > -1 ", debug_level
            STOP
        ENDIF 

            calculate_RR_ = calculate_RR
        debug_level_  = debug_level
        print_RR_              = print_RR
         print_current_         = print_current
        electronic_temperature_ = electronic_temperature
                                     bias_ = bias



    END SUBROUTINE set_control



!***********************************************
   SUBROUTINE   set_egrid
   !***********************************************
   !
  USE T_egrid_module,         ONLY : emin_         =>  emin, &
                                     emax_         =>  emax, &
                                     nemax_        =>  ne
   IMPLICIT NONE
      ! Local
       CHARACTER(9)      :: subname="set_egrid"
       INTEGER :: ierr
         
        !      
        IF( ne < 1 ) THEN 
            PRINT*, "Error in Routine ",  TRIM(subname) , " in module ", TRIM(modulename)
            PRINT*, "Error in nemax definition:", "nemax is intended to be > = 1", ne
            STOP
        ENDIF 
        !
        IF (   emax < emin  ) THEN 
            PRINT*, "Error in Routine ",  TRIM(subname) , " in module ", TRIM(modulename)
            PRINT*, "Error in energy definition:", " emax is supposed > emin "
            PRINT*, " emax=", emax
            PRINT*, " emin=", emin
            STOP
        ENDIF 
        !
        IF (  ( emax == emin ) .AND. ( nemax > 1 )  ) THEN 
            PRINT*, "Error in Routine ",  TRIM(subname) , " in module ", TRIM(modulename)
            PRINT*, "Error in energy definition:", " emax == emin while nemax > 1"
            PRINT*, " emax=", emax
            PRINT*, " emin=", emin
            PRINT*, " nemax", ne
            STOP
        ENDIF 

        emin_    =  emin
        emax_    =  emax
        nemax_   =  ne

    END SUBROUTINE set_egrid
!***********************************************
   SUBROUTINE   set_gap
   !***********************************************
   ! set_gap    USE T_gapgrid_module,                  ONLY :  ngap, gapmax, gapmin
  USE T_gapgrid_module,         ONLY : gapmin_      =>  gapmin, &
                                        gapmax_      =>   gapmax, &
                                        ngap_        =>  ngap
   IMPLICIT NONE
      ! Local
       CHARACTER(8)      :: subname="set_gap"
       INTEGER :: ierr
         
        !      
        IF( ngap < 1 ) THEN 
            PRINT*, "Error in Routine ",  TRIM(subname) , " in module ", TRIM(modulename)
            PRINT*, "Error in ngap definition:", " ngap is intended to be > = 1", ngap
            STOP
        ENDIF 
        !
        IF (   gapmax < gapmin  ) THEN 
            PRINT*, "Error in Routine ",  TRIM(subname) , " in module ", TRIM(modulename)
            PRINT*, "Error in gap definition:", " gapmax is supposed > gapmin "
            PRINT*, " gapmax=", gapmax
            PRINT*, " gapmin=", gapmin
            STOP
        ENDIF 
        !
        IF (  ( gapmax == gapmin ) .AND. ( ngap > 1 )  ) THEN 
            PRINT*, "Error in Routine ",  TRIM(subname) , " in module ", TRIM(modulename)
            PRINT*, "Error in gap definition:", " gapmax == gapmin while ngap > 1"
            PRINT*, " gapmax=", gapmax
            PRINT*, " gapmin=", gapmin
            PRINT*, " ngap", ngap
            STOP
        ENDIF 
        !
        gapmin_   =  gapmin
        gapmax_   =  gapmax
        ngap_     =  ngap

    END SUBROUTINE set_gap
!***********************************************
   SUBROUTINE   set_gamma
   !***********************************************
    ! set_gamma   USE T_gammagrid_module,                 ONLY : ngamma, gammamax, gammamin  
  USE T_gammagrid_module,         ONLY : ngamma_          =>  ngamma, &
                                        gammamax_        =>  gammamax, &
                                        gammamin_        =>  gammamin
   IMPLICIT NONE
      ! Local
       CHARACTER(9)      :: subname="set_gamma"
       INTEGER :: ierr
         
        !      
        IF( ngamma < 1 ) THEN 
            PRINT*, "Error in Routine ",  TRIM(subname) , " in module ", TRIM(modulename)
            PRINT*, "Error in ngamma definition:", " ngamma is intended to be > = 1", ngamma
            STOP
        ENDIF 
        !
        IF (   gammamax < gammamin  ) THEN 
            PRINT*, "Error in Routine ",  TRIM(subname) , " in module ", TRIM(modulename)
            PRINT*, "Error in gamma definition:", " gammamax is supposed > gammamin "
            PRINT*, " gammamax=", gammamax
            PRINT*, " gammamin=", gammamin
            STOP
        ENDIF 
        !
        IF (  ( gammamax == gammamin ) .AND. ( ngamma > 1 )  ) THEN 
            PRINT*, "Error in Routine ",  TRIM(subname) , " in module ", TRIM(modulename)
            PRINT*, "Error in gamma definition:", " gammamax == gammamin while ngamma > 1"
            PRINT*, " gammamax=", gammamax
            PRINT*, " gammamin=", gammamin
            PRINT*, " ngamma=", ngamma
            STOP
        ENDIF 
        !
        ngamma_   =  ngamma
        gammamax_   =  gammamax
        gammamin_   =  gammamin
        !
    END SUBROUTINE set_gamma

!***********************************************
   SUBROUTINE   set_hamiltonian_workspace
   !***********************************************
   ! set_hamiltonian_workspace     USE hamiltonian_workspace_module,       ONLY : dimL, dimC, dimR
  USE hamiltonian_workspace_module,         ONLY : dimC_          =>  dimC, &
                                                   dimL_          =>  dimL, &
                                                   dimR_          =>  dimR
   IMPLICIT NONE
      ! Local
       CHARACTER(25)      :: subname="set_hamiltonian_workspace"
       INTEGER :: ierr
         
        !      
        IF( dimC < 1 ) THEN 
            PRINT*, "Error in Routine ",  TRIM(subname) , " in module ", TRIM(modulename)
            PRINT*, "Error in dimC definition:", " dimC is intended to be > = 1", dimC
            STOP
        ENDIF 
        !
        !      
        IF( dimL < 1 ) THEN 
            PRINT*, "Error in Routine ",  TRIM(subname) , " in module ", TRIM(modulename)
            PRINT*, "Error in dimL definition:", " dimL is intended to be > = 1", dimL
            STOP
        ENDIF 
        !      
        IF( dimR < 1 ) THEN 
            PRINT*, "Error in Routine ",  TRIM(subname) , " in module ", TRIM(modulename)
            PRINT*, "Error in dimR definition:", " dimR is intended to be > = 1", dimR
            STOP
        ENDIF 
        dimC_   =  dimC
        dimL_   =  dimL
        dimR_   =  dimR
        !
    END SUBROUTINE set_hamiltonian_workspace

!***********************************************
   SUBROUTINE   set_hamiltonian_reference
   !***********************************************
   ! set_hamiltonian_reference     USE hamiltonian_construction_module,       ONLY : dimL_ref, dimC_ref, dimR_ref,  HC_file,  HL_file,  HR_file
  USE hamiltonian_construction_module,      ONLY : dimC_          =>  dimC_ref, &
                                                   dimL_          =>  dimL_ref, &
                                                   dimR_          =>  dimR_ref, &
                                                   HC_file_       =>  HC_file, &
                                                   HL_file_       =>  HL_file, &
                                                   HR_file_       =>  HR_file
   IMPLICIT NONE
      ! Local
       CHARACTER(25)      :: subname="set_hamiltonian_reference"
       INTEGER :: ierr
         
        !      
        IF( dimC < 1 ) THEN 
            PRINT*, "Error in Routine ",  TRIM(subname) , " in module ", TRIM(modulename)
            PRINT*, "Error in dimC definition:", " dimC is intended to be > = 1", dimC
            STOP
        ENDIF 
        !
        !      
        IF( dimL < 1 ) THEN 
            PRINT*, "Error in Routine ",  TRIM(subname) , " in module ", TRIM(modulename)
            PRINT*, "Error in dimL definition:", " dimL is intended to be > = 1", dimL
            STOP
        ENDIF 
        !      
        IF( dimR < 1 ) THEN 
            PRINT*, "Error in Routine ",  TRIM(subname) , " in module ", TRIM(modulename)
            PRINT*, "Error in dimR definition:", " dimR is intended to be > = 1", dimR
            STOP
        ENDIF 
        dimC_   =  dimC
        dimL_   =  dimL
        dimR_   =  dimR
        HC_file_  =  HC_file
        HL_file_  =  HL_file
        HR_file_  =  HR_file

        !
    END SUBROUTINE set_hamiltonian_reference


!***********************************************
   SUBROUTINE  input_summarize  
   !***********************************************
   ! 
  IMPLICIT NONE
      ! Local
       CHARACTER(15)      :: subname="input_summarize"
       INTEGER :: ierr

       PRINT*, "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
       PRINT*, "%                      General Control Variables                              %"
       PRINT*, "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
       PRINT*, "%%% debug_level  ---  debug level set to ",  debug_level
   IF (debug_level == 0) THEN
       PRINT*, "%%% Debug Mode: OFF"
   ELSE
       PRINT*, "%%% Debug Mode:  ON - Not Yet fully Implemented"
       PRINT*, "%%% Debug Mode>= 1  - All the standard output files are printed"
       PRINT*, "%%% Debug Mode>= 3  - All the Grids                 are printed"
       PRINT*, "%%% Debug Mode>= 5  - All the Read Input            are printed"
   ENDIF
       PRINT*, "%%% HC_file      ---  Filename for Central Hamiltonian region: ",  TRIM(HC_file)
       PRINT*, "%%% HL_file      ---  Filename for Left Hamiltonian region   : ",  TRIM(HL_file)
       PRINT*, "%%% HR_file      ---  Filename for Right Hamiltonian region  : ",  TRIM(HR_file)



       PRINT*, "%%% calculate_RR ---  Calculation of rectification ratio",  calculate_RR
       PRINT*, "%                             Output Files "
       PRINT*, "%%% print_RR             ---  Print the rectification ratio           : ",  print_RR

       PRINT*, "%%% print_current        ---  Print the Current                       : ",  print_current

       PRINT*, "%%% electronic_temperature   --- kBT for occupation function in eV",   electronic_temperature
       PRINT*, "%%% bias   --- Bias applied through the junction in Volts",   bias   
       PRINT*, "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
       PRINT*, "%                              Dimensions                                     %"
       PRINT*, "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
       PRINT*, "%%% dimC   --- Number of molecular levels  --- ",   dimC
   IF ( dimC == 1) THEN
       PRINT*, "%%% WARNING %%%%%%               --- Only one Molecular level used"
       PRINT*, "%%% WARNING %%%%%%               --- gap and gamma loops useless"
   ENDIF
       PRINT*, "%%% dimL   --- Dimension of left lead      --- ",   dimL
   IF ( dimL /= 1) THEN
       PRINT*, "%%% WARNING %%%%%%               --- Calculation for Leads with dimension > 1 not yet implemented"
       PRINT*, "%%% WARNING %%%%%%               --- Calculation will crash"
   ENDIF
       PRINT*, "%%% dimR   --- Dimension of right lead     --- ",   dimR
   IF ( dimR /= 1) THEN
       PRINT*, "%%% WARNING %%%%%%               --- Calculation for Leads with dimension > 1 not yet implemented"
       PRINT*, "%%% WARNING %%%%%%               --- Calculation will crash"
   ENDIF
       PRINT*, "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
       PRINT*, "%                        Grid Control Variables                               %"
       PRINT*, "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
        PRINT*, "%                 Energy grid Control Variables "
       PRINT*, "%%% nemax       --- Number of points used for the energy grid ",   ne
       PRINT*, "%%% emax        --- Maximum value of the energy grid",   emax
       PRINT*, "%%% COMMENT: emax is supposed to be set as position of the highest molecular orbital + bias/2 + photonmax + 1 eV"
       PRINT*, "%%% emin        --- Minimum value of the energy grid",   emin
       PRINT*, "%%% COMMENT: emin is supposed to be set as position of the lowest molecular orbital - bias/2 - photonmax - 1 eV"
       PRINT*, "%                   gap grid Control Variables "
       PRINT*, "%%% ngap                               --- Number of points used for the gap grid ",   ngap
   IF ( ngap == 1) THEN
       PRINT*, "%%% WARNING %%%%%%                      --- Only one gap used"
       PRINT*, "%%% WARNING %%%%%%                      --- gap grid set to gapmax"
   ENDIF
       PRINT*, "%%% gapmax                             --- Maximum value of the gap grid",   gapmax
       PRINT*, "%%% gapmin                             --- Minimum value of the gap grid",   gapmin

       PRINT*, "%                  gamma grid Control Variables "
       PRINT*, "%%% ngamma                              --- Number of points used for the gamma grid ",   ngamma
   IF ( ngamma == 1) THEN
       PRINT*, "%%% WARNING %%%%%%                      --- Only one gamma used"
       PRINT*, "%%% WARNING %%%%%%                      --- gamma grid set to gammamax"
   ENDIF
       PRINT*, "%%% gammamax                            --- Maximum value of the gamma grid",   gammamax
       PRINT*, "%%% aplhamin                            --- Minimum value of the gamma grid",   gammamin
 
   
    END SUBROUTINE input_summarize  
  END  MODULE T_input_module

 

 


