
========================================
INSTALLATION PROCEDURE
========================================

NOTES: (i) The present version of the code adopts the installation procedure of the PWscf
package (for more details see also http://www.pwscf.org). (ii) This installation 
procedure is still experimental, and only a limited number of architectures are 
currently supported. Details are also reported in the $TOPDIR/docs/README.install 
file, where $TOPDIR is the top directory of the WanT source tree.

Installation is a two-step procedure:
   1. cd to the top directory of the WanT tree, and issue this command at the 
      shell prompt:   ./configure [<options>]
   2. Now run: make <target>

where <target> is one (or more) of the following: wannier, transport, libwant, libiotk,
all, clean, wash. Running make without arguments prints a short manual. Cross-compilation
is not currently supported.

=========================
Step one: configuring
=========================

''configure'' is a GNU-style configuration script, automatically generated by GNU Autoconf. 
(If you want to play with it, its source file is $TOPDIR/conf/configure.ac; 
 you may also want to edit $TOPDIR/conf/make.sys.in) 

It generates the following files:
   $TOPDIR/make.sys          compilation settings and flags
   $TOPDIR/*/make.depend     dependencies, in each source dir

Files make.depend are actually generated by the makedeps.sh shell script. 
If you modify the program sources, you might have to rerun it. Note that you must 
run it from the directory it is in.

To force using a particular compiler, or compilation flags, or libraries, you may 
set the appropriate environment variables when running the configuration script. 
For example:

     ./configure CC=gcc CFLAGS=-O3 LIBS="-llapack -lblas -lfftw"

Some of those environment variables are:
   TOPDIR            : top directory of the WanT tree (defaults to ?pwd?)
   F90, F77, CC      : Fortran 90, Fortran 77, and C compilers
   CPP               : source file preprocessor (defaults to ?$CC -E?)
   LD                : linker (defaults to $F90)
   CFLAGS, FFLAGS, F90FLAGS, CPPFLAGS, LDFLAGS : compilation flags
   LIBDIRS           : extra directories to search for libraries (see below)

You should always be able to compile the WanT suite of programs without having to 
edit any of the generated files. If you ever have to, that should be considered a 
bug in the configuration script and you are encouraged to submit a bug report.


IMPORTANT: WanT can take advantage of several optimized numerical libraries:
- ESSL on AIX systems (shipped by IBM)
- MKL together with Intel compilers (shipped by Intel, free for non-commercial use)
- ATLAS (freely downloadable from http://math-atlas.sourceforge.net )
- FFTW (freely downloadable from http://www.fftw.org)

The configuration script attempts to find those libraries, but may fail if they 
have been installed in non-standard locations. You should look at the LIBS environment 
variable (either in the output of the configuration script, or in the generated make.sys) 
to check whether all available libraries were found. 

If any libraries weren't found, you can rerun the configuration script and pass it a list
of directories to search, by setting the environment variable LIBDIRS; directories 
in the list must be separated by spaces. For example:

    ./configure LIBDIRS="/opt/intel/mkl/mkl61/lib/32 /usr/local/lib/fftw-2.1.5"

If this still fails, you may set the environment variable LIBS manually and retry. 
For example:
    ./configure LIBS="-L/cineca/prod/intel/lib -lfftw -llapack -lblas"

Beware that in this case, you must specify all the libraries that you want to link to. 
The configuration script will blindly accept the specified value, and will not search 
for any extra library.
If you want to use the FFTW library, the fftw.h include file is also required. 
If the configuration script wasn't able to find it, you can specify the correct 
directory in the INCLUDEFFTW environment variable. For example:

    ./configure INCLUDEFFTW="/cineca/lib/fftw-2.1.3/fftw"


============================
Step two: compiling
============================

Here is a list of available compilation targets:

    make wannier                compile  disentangle.x (step 1)
                                         wannier.x (step 2)
                                         bands.x (post proc)
                                         plot.x (post proc)
                                         blc2wan.x (post proc)
    make transport              compile  conductor.x (step 3)
    make all                             make wannier + transport
    make libwant                compile  WanT basic libs
    make libiotk                compile  Input-Output toolkit lib (iotk)
    make clean                  remove   Object files, libs and executables
    make clean_test             remove   test output files
    make wash                   remove   Configuration files too

IMPORTANT: If you change any compilation or precompilation option after a 
           previous (successful or failed) compilation, you must run make clean 
           before recompiling, unless you know exactly which routines are affected 
           by the changed options and how to force their recompilation.

