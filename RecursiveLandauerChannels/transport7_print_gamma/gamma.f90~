!
! Copyright (C) 2005 WanT Group
!
! This file is distributed under the terms of the
! GNU General Public License. See the file `License\'
! in the root directory of the present distribution,
! or http://www.gnu.org/copyleft/gpl.txt .
!
!*********************************************
   MODULE T_gamma_module
!*********************************************
   USE kinds,           ONLY : dbl
   USE parameters,      ONLY : nstrx
   USE constants,            ONLY : PI, ZERO, CZERO, CONE, CI, EPS_m5
   USE T_hamiltonian_module, ONLY : dimC
   USE T_egrid_module,       ONLY : ne, emin, emax
   USE iotk_module

   IMPLICIT NONE
   PRIVATE 
   SAVE
!
! Contains transport hamiltonian data
! 
    ! 
    !
    COMPLEX(dbl), ALLOCATABLE :: sigma_L(:,:,:), sigma_R(:,:,:)
    !
    COMPLEX(dbl), ALLOCATABLE :: gamma_L_s(:,:,:), gamma_R_s(:,:,:)
    !
    !
    LOGICAL :: alloc = .FALSE.


!
! end delcarations
!

   PUBLIC :: sigma_L, sigma_R, gamma_R_s, gamma_L_s
   !
   PUBLIC :: alloc
   !
   PUBLIC :: gamma_allocate
   PUBLIC :: gamma_deallocate
   PUBLIC :: gamma_L_print
   PUBLIC :: gamma_R_print
   PUBLIC :: sigma_L_print
   PUBLIC :: sigma_R_print

CONTAINS

!
! subroutines
!

!**********************************************************
   SUBROUTINE gamma_allocate()
   !**********************************************************
   IMPLICIT NONE
      CHARACTER(20)      :: subname="hamiltonian_allocate"
      INTEGER  :: ierr

      IF ( alloc )       CALL errore(subname,'already allocated', 1 )

      !
      !
      ALLOCATE ( sigma_L(ne,dimC,dimC), STAT=ierr )
           IF( ierr /=0 ) CALL errore(subname, ' allocating gamma_L', 1 )
      ALLOCATE ( sigma_R(ne,dimC,dimC), STAT=ierr )
           IF( ierr /=0 ) CALL errore(subname, ' allocating gamma_R', 1 )
      ALLOCATE ( gamma_L_s(ne,dimC,dimC), STAT=ierr )
           IF( ierr /=0 ) CALL errore(subname, ' allocating gamma_L_s', 1 )
      ALLOCATE ( gamma_R_s(ne,dimC,dimC), STAT=ierr )
           IF( ierr /=0 ) CALL errore(subname, ' allocating gamma_R_s', 1 )

      !
      !
      gamma_L_s(:,:,:) = CZERO
      gamma_R_s(:,:,:) = CZERO
      !
      !
      sigma_L(:,:,:) = CZERO
      sigma_R(:,:,:) = CZERO
      !
      alloc = .TRUE.
      !
   END SUBROUTINE gamma_allocate


!**********************************************************
   SUBROUTINE gamma_deallocate()
   !**********************************************************
   IMPLICIT NONE
      CHARACTER(22)      :: subname="hamiltonian_deallocate"
      INTEGER :: ierr

      IF ( .NOT. alloc ) RETURN


      DEALLOCATE ( sigma_L, STAT=ierr )
           IF( ierr /=0 ) CALL errore(subname, 'deallocating sigma_L', 1 )
      DEALLOCATE ( sigma_R, STAT=ierr )
           IF( ierr /=0 ) CALL errore(subname, 'deallocating sigma_R', 1 )
          !
      DEALLOCATE ( gamma_L_s, STAT=ierr )
           IF( ierr /=0 ) CALL errore(subname, 'deallocating gamma_L_s', 1 )
      DEALLOCATE ( gamma_R_s, STAT=ierr )
           IF( ierr /=0 ) CALL errore(subname, 'deallocating gamma_R_s', 1 )
          !
          !

      alloc = .FALSE.   

   END SUBROUTINE gamma_deallocate


!**********************************************************
   SUBROUTINE gamma_L_print(unit, name)
   !**********************************************************
   IMPLICIT NONE
       INTEGER,         INTENT(in) :: unit
       CHARACTER(*),    INTENT(in) :: name
       CHARACTER(nstrx)   :: attr
       CHARACTER(13)      :: subname="gamma_L_print"
       INTEGER            :: ierr, ien
 
       CALL iotk_write_begin(unit,TRIM(name))

       CALL iotk_write_begin(unit,"DATA")
       CALL iotk_write_attr(attr,"nomega",ne) 
       CALL iotk_write_attr(attr,"emin",emin) 
       CALL iotk_write_attr(attr,"emax",emax) 
       CALL iotk_write_empty(unit,"DATA",ATTR=attr)

       CALL iotk_write_begin(unit,"gamma_L")


       DO ien = 1, ne
             !
             CALL iotk_write_dat(unit,"sigma"//TRIM(iotk_index(ien)), gamma_L_s(ien,1:4,1:4))
       ENDDO


       CALL iotk_write_end(unit,"gamma_L")
       CALL iotk_write_end(unit,TRIM(name))

   END SUBROUTINE gamma_L_print

!**********************************************************
   SUBROUTINE gamma_R_print(unit, name)
   !**********************************************************
   IMPLICIT NONE
       INTEGER,         INTENT(in) :: unit
       CHARACTER(*),    INTENT(in) :: name
       CHARACTER(nstrx)   :: attr
       CHARACTER(13)      :: subname="gamma_R_print"
       INTEGER            :: ierr, ien
 
       CALL iotk_write_begin(unit,TRIM(name))

       CALL iotk_write_begin(unit,"DATA")
       CALL iotk_write_attr(attr,"nomega",ne) 
       CALL iotk_write_attr(attr,"emin",emin) 
       CALL iotk_write_attr(attr,"emax",emax) 
       CALL iotk_write_empty(unit,"DATA",ATTR=attr)

       CALL iotk_write_begin(unit,"gamma_R")

       DO ien = 1, ne
             !
             CALL iotk_write_dat(unit,"sigma"//TRIM(iotk_index(ien)), gamma_R_s(ien,5:8,5:8))
       ENDDO

       CALL iotk_write_end(unit,"gamma_R")
       CALL iotk_write_end(unit,TRIM(name))

   END SUBROUTINE gamma_R_print


!**********************************************************
   SUBROUTINE sigma_L_print(unit, name)
   !**********************************************************
   IMPLICIT NONE
       INTEGER,         INTENT(in) :: unit
       CHARACTER(*),    INTENT(in) :: name
       CHARACTER(nstrx)   :: attr
       CHARACTER(13)      :: subname="sigma_L_print"
       INTEGER            :: ierr, ien
 
       CALL iotk_write_begin(unit,TRIM(name))

       CALL iotk_write_begin(unit,"DATA")
       CALL iotk_write_attr(attr,"nomega",ne) 
       CALL iotk_write_attr(attr,"emin",emin) 
       CALL iotk_write_attr(attr,"emax",emax) 
       CALL iotk_write_empty(unit,"DATA",ATTR=attr)

       CALL iotk_write_begin(unit,"sigma_L")


       DO ien = 1, ne
             !
             CALL iotk_write_dat(unit,"sigma"//TRIM(iotk_index(ien)), sigma_L(ien,1:4,1:4))
       ENDDO


       CALL iotk_write_end(unit,"sigma_L")
       CALL iotk_write_end(unit,TRIM(name))

   END SUBROUTINE sigma_L_print

!**********************************************************
   SUBROUTINE sigma_R_print(unit, name)
   !**********************************************************
   IMPLICIT NONE
       INTEGER,         INTENT(in) :: unit
       CHARACTER(*),    INTENT(in) :: name
       CHARACTER(nstrx)   :: attr
       CHARACTER(13)      :: subname="sigma_R_print"
       INTEGER            :: ierr, ien
 
       CALL iotk_write_begin(unit,TRIM(name))

       CALL iotk_write_begin(unit,"DATA")
       CALL iotk_write_attr(attr,"nomega",ne) 
       CALL iotk_write_attr(attr,"emin",emin) 
       CALL iotk_write_attr(attr,"emax",emax) 
       CALL iotk_write_empty(unit,"DATA",ATTR=attr)

       CALL iotk_write_begin(unit,"sigma_R")

       DO ien = 1, ne
             !
             CALL iotk_write_dat(unit,"sigma"//TRIM(iotk_index(ien)), sigma_R(ien,5:8,5:8))
       ENDDO

       CALL iotk_write_end(unit,"sigma_R")
       CALL iotk_write_end(unit,TRIM(name))

   END SUBROUTINE sigma_R_print


END MODULE T_gamma_module

